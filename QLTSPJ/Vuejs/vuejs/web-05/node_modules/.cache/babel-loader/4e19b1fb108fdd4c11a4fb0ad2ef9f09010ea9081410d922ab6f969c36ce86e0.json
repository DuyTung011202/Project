{"ast":null,"code":"import { removeVietnameseTones } from '../../../js/common/function.js';\nimport Validate from '../../../js/common/validate.js';\nimport axios from 'axios';\nimport Enum from '../../../js/common/enum.js';\nconst keycode = Enum.KEY_CODE;\nexport default {\n  name: \"MISACombobox\",\n  props: {\n    data: {\n      // Danh sách dữ liệu\n      type: Array,\n      required: false\n    },\n    placeholder: {\n      // Placeholder của input\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    position: {\n      // Vị trí hiển thị danh sách dữ liệu\n      type: String,\n      required: false,\n      default: \"top\"\n    },\n    label: {\n      // Label của combobox\n      type: String,\n      required: false,\n      default: null\n    },\n    required: {\n      // Bắt buộc nhập\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    selectBox: {\n      // Nếu là select box thì không cho gõ text\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    modelValue: {\n      // Giá trị của combobox\n      required: false,\n      default: null\n    },\n    propKey: {\n      // Key của dữ liệu\n      required: false,\n      default: \"key\"\n    },\n    propValue: {\n      // Value của dữ liệu\n      required: false,\n      default: \"value\"\n    },\n    styleProps: {\n      // Style của combobox\n      type: Array,\n      required: false,\n      default: () => []\n    },\n    propApi: {\n      // Nếu có api thì lấy dữ liệu từ api\n      type: String,\n      required: false,\n      default: null\n    },\n    errorLabel: {\n      // Hiển thị lỗi\n      required: false\n    },\n    isSubmit: {\n      // Kiểm tra khi submit form\n      required: false,\n      default: false\n    },\n    iconClass: {\n      type: String\n    }\n  },\n  computed: {\n    /**\r\n     * @description: Tạo style cho combobox\r\n     * Author: DDTung 11/07/2023\r\n     */\n    style() {\n      let styleProps = {};\n      if (this.styleProps.length > 0) {\n        this.styleProps.forEach(item => {\n          const key = item.split(\":\")[0];\n          const value = item.split(\":\")[1];\n          styleProps[key] = value;\n        });\n        return styleProps;\n      } else {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      isShowListData: false,\n      // Hiển thị danh sách dữ liệu\n      indexItemFocus: 0,\n      // index của item được focus\n      indexItemSelected: -1,\n      // index của item được chọn\n      keyItemSelected: this.modelValue,\n      textInput: this.textInput,\n      dataApi: [],\n      // dữ liệu lấy từ api\n      filterData: [],\n      // dữ liệu lọc\n      error: false,\n      // Hiển thị lỗi\n      errorMess: \"\" // Nội dung lỗi\n    };\n  },\n\n  watch: {\n    /**\r\n     * @description: Khi thay đổi text thì sẽ tìm kiếm dữ liệu theo text\r\n     * Author: DDTung 11/07/2023\r\n     */\n    textInput: {\n      handler: function (value) {\n        const self = this;\n        self.filterData = self.dataApi.filter(option => removeVietnameseTones(option[self.propValue]).toLowerCase().includes(removeVietnameseTones(value).toLowerCase()));\n        this.indexItemFocus = -1;\n      },\n      deep: true\n    },\n    /**\r\n     * @description: Khi bên component cha gọi tới submit thì validate lại dữ liệu trước khi submit\r\n     * Author: DDTung 11/07/2023\r\n     */\n    isSubmit: {\n      // nếu isSubmit là true thì validate\n      handler(isSubmitted) {\n        if (isSubmitted) {\n          if (this.validate() && self.error) {\n            this.$emit(\"update:isSubmit\", false);\n          }\n        }\n      },\n      deep: true\n    },\n    /**\r\n     * @description: Nếu data bên component cha thay đổi thì sẽ lấy dữ liệu mới\r\n     * Author: DDTung 11/07/2023\r\n     */\n    data: {\n      handler(newData) {\n        this.dataApi = newData;\n        this.filterData = newData;\n        if (this.indexItemSelected !== -1) {\n          this.textInput = newData[this.indexItemSelected][this.propValue];\n        }\n      },\n      deep: true\n    },\n    /**\r\n     * @description: Nếu modelValue bên component cha thay đổi thì sẽ reset lại combobox\r\n     * Author: DDTung 11/07/2023\r\n     */\n    modelValue(newVal) {\n      if (newVal === null) {\n        // Nếu modelValue bằng null thì set textInput = \"\" và keyItemSelected = \"\"\n        this.$refs.input.blur();\n        this.resetCombobox();\n      }\n    }\n  },\n  methods: {\n    /**\r\n     * @description: Hàm này dùng để validate combobox xem có trống hay không\r\n     * @param {String} giá trị của combobox\r\n     * Author: DDTung 11/07/2023\r\n     */\n    // validate() {\n    //     const self = this;\n    //     if (self.required) {\n    //         self.error = !Validate.isNullOrEmpty(self.keyItemSelected);\n    //         if (self.error) {\n    //             self.errorMess = self.$t(\"validate_error.required\", [self.errorLabel]);\n    //             return false;\n    //         } else {\n    //             self.errorMess = \"\";\n    //             self.error = false;\n    //         }\n    //     }\n    // },\n    /**\r\n     * @description: Hàm này dùng để hiển thị danh sách dữ liệu\r\n     * Author: DDTung 11/07/2023\r\n     */\n    showListData() {\n      const self = this;\n      try {\n        self.isShowListData = true; // Chuyển trạng thái hiển thị danh sách dữ liệu\n        self.filterData = self.dataApi; // Gán dữ liệu đã lọc bằng dữ liệu từ api\n        if (self.indexItemSelected > -1) {\n          self.$nextTick(() => {\n            // Đợi DOM render xong thì mới scroll đến vị trí đã chọn\n            self.indexItemFocus = self.indexItemSelected;\n            const position = self.$refs['combobox__data'].children[self.indexItemSelected].offsetTop - self.$refs['combobox__data'].offsetTop;\n            self.$refs['combobox__data'].scrollTop = position;\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    /**\r\n     * @description: Hàm này dùng để lấy dữ liệu khi click vào item hoặc nhấn enter\r\n     * @param {Object} item - Dữ liệu của item được chọn\r\n     * @param {Number} index - Index của item được chọn\r\n     * Author: DDTung 11/07/2023\r\n     */\n    onHandleSelected(item, index) {\n      const self = this;\n      try {\n        const value = item[self.propValue]; // Lấy giá trị của item được chọn\n        self.textInput = value; // Gán giá trị cho textInput\n        self.indexItemSelected = index; // Gán index của item được chọn\n        self.indexItemFocus = index; // Gán index của item được focus\n        self.keyItemSelected = item[self.propKey]; // Gán key của item được chọn\n        self.$emit(\"update:modelValue\", self.keyItemSelected); // Emit giá trị của item được chọn\n        self.$emit(\"update:textInput\", value); // Emit giá trị của text input\n        self.isShowListData = false; // Hide list data\n        // self.validate();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    /**\r\n     * @description: Hàm này dùng để ẩn đi danh sách dữ liệu\r\n     * Author: DDTung 11/07/2023\r\n     */\n    // hideListData() {\n    //     const self = this;\n    //     if (!Validate.isNullOrEmpty(self.textInput)) { // Nếu textInput không rỗng thì emit giá trị của textInput là không có trong data\n    //         self.$emit(\"update:modelValue\", null);\n    //         self.resetCombobox();\n    //     }\n    //     if (Validate.isNullOrEmpty(self.keyItemSelected)) { // Nếu keyItemSelected không rỗng thì emit giá trị của keyItemSelected là không có trong data\n    //         self.onHandleSelected(self.dataApi[self.indexItemSelected], self.indexItemSelected);\n    //     }\n    //     // this.validate();\n    //     self.isShowListData = false; // Hide list data\n    // },\n    /**\r\n     * @description: Hàm này dùng để chọn item khi nhấn phím mũi tên lên, xuống, enter, esc\r\n     * Author: DDTung 11/07/2023\r\n     */\n    selecItemUpDown(event) {\n      const self = this;\n      const keyCodePress = event.keyCode; // Lấy mã phím được nhấn\n      if (!self.isShowListData && (keyCodePress == keycode.ARROW_DOWN || keyCodePress == keycode.ARROW_UP)) {\n        self.showListData();\n        return;\n      }\n      if (self.isShowListData) {\n        try {\n          switch (keyCodePress) {\n            case keycode.ENTER:\n              if (self.filterData.length > 0 && self.indexItemFocus !== -1) {\n                // lấy ra vị trí index của item được chọn trong danh sách dữ liệu\n                const index = self.dataApi.findIndex(item => item[self.propValue] == self.filterData[self.indexItemFocus][self.propValue]);\n                self.onHandleSelected(self.filterData[self.indexItemFocus], index);\n              } else {\n                self.hideListData();\n              }\n              break;\n            case keycode.ARROW_DOWN:\n              self.indexItemFocus = self.indexItemFocus === self.filterData.length - 1 ? 0 : self.indexItemFocus + 1; // Focus vào item tiếp theo\n              self.handleScroll(self.indexItemFocus);\n              break;\n            case keycode.ARROW_UP:\n              self.indexItemFocus = self.indexItemFocus === 0 ? self.filterData.length - 1 : self.indexItemFocus - 1; // Focus vào item trước đó\n              self.handleScroll(self.indexItemFocus);\n              break;\n            case keycode.ESC:\n              self.hideListData(); // Ẩn danh sách dữ liệu\n              break;\n            default:\n              break;\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    },\n    /**\r\n     * @description: Hàm này dùng để xử lý thanh cuộn lên xuống khi focus vào item\r\n     * Author: DDTung 11/07/2023\r\n     */\n    handleScroll(indexItemFocus) {\n      const self = this;\n      try {\n        const position = self.$refs['combobox__data'].children[indexItemFocus].offsetTop - self.$refs['combobox__data'].offsetTop;\n        self.$refs['combobox__data'].scrollTop = position;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    /**\r\n     * @description: Hàm này dùng để reset lại combobox\r\n     * Author: DDTung 11/07/2023\r\n     */\n    resetCombobox() {\n      this.indexItemSelected = -1; // Reset lại index item được chọn\n      this.indexItemFocus = 0; // Reset lại index item được focus\n      this.keyItemSelected = null; // Reset lại key item được chọn\n      this.textInput = \"\"; // Reset lại text input\n      this.filterData = []; // Reset lại dữ liệu lọc\n    }\n  },\n\n  /**\r\n   * @description: Hook khởi tạo để gán giá trị vào combo box\r\n   * Author: DDTung 11/07/2023\r\n   */\n  async created() {\n    const self = this;\n    try {\n      if (self.propApi) {\n        // Nếu có prop api thì gọi api lấy dữ liệu\n        const response = await axios.get(self.propApi);\n        self.dataApi = response.data;\n        self.filterData = response.data;\n      }\n      if (self.data) {\n        // Nếu có dữ liệu truyền từ component cha thì gán dữ liệu\n        self.dataApi = self.data;\n        self.filterData = self.data;\n      }\n      if (self.modelValue) {\n        // Nếu có giá trị mặc định truyền từ component cha\n        const index = self.dataApi.findIndex(item => item[self.propKey] === self.modelValue); // Tìm index của item có key trùng với giá trị mặc định\n        if (index !== -1) {\n          // Nếu tồn tại item có key trùng với giá trị mặc định\n          self.onHandleSelected(self.dataApi[index], index); // Lấy dữ liệu của item được focus\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};","map":{"version":3,"names":["removeVietnameseTones","Validate","axios","Enum","keycode","KEY_CODE","name","props","data","type","Array","required","placeholder","String","default","position","label","Boolean","selectBox","modelValue","propKey","propValue","styleProps","propApi","errorLabel","isSubmit","iconClass","computed","style","length","forEach","item","key","split","value","isShowListData","indexItemFocus","indexItemSelected","keyItemSelected","textInput","dataApi","filterData","error","errorMess","watch","handler","self","filter","option","toLowerCase","includes","deep","isSubmitted","validate","$emit","newData","newVal","$refs","input","blur","resetCombobox","methods","showListData","$nextTick","children","offsetTop","scrollTop","console","log","onHandleSelected","index","selecItemUpDown","event","keyCodePress","keyCode","ARROW_DOWN","ARROW_UP","ENTER","findIndex","hideListData","handleScroll","ESC","created","response","get"],"sources":["D:\\Learning\\MISA_FRESHER_WEB\\freshermisa\\web202305\\mf1661-ddtung\\vuejs\\web-05\\src\\components\\base\\combobox\\MISACombobox.vue"],"sourcesContent":["<template>\r\n    <div class=\"v-combobox\">\r\n        <div class=\"v-combobox__label\" v-if=\"label\">\r\n            <label @click=\"showListData(); $refs.input.focus()\">{{ label }} <span v-if=\"required\">*</span>\r\n            </label>\r\n        </div>\r\n        <div class=\"v-combobox__body\">\r\n            <div class=\"v-combobox__selected\" :class=\"[{ error: error }, { 'v-combobox__focus': isShowListData }]\"\r\n                :style=\"style\" :data-error=\"`${!isShowListData && error ? errorMess : ''}`\"\r\n                :tooltip=\"`${!isShowListData && error ? errorMess : ''}`\">\r\n                <span :class=\"iconClass\"></span>\r\n                <input ref=\"input\" type=\"text\" v-model=\"textInput\" @click=\"showListData\" :placeholder=\"placeholder\"\r\n                    :disabled=\"selectBox\" @focus=\"showListData\" @blur=\"hideListData\" @keydown=\"selecItemUpDown\" />\r\n                <div class=\"v-combobox__icon\" tabindex=\"-1\" @click=\"showListData\" @blur=\"hideListData\"\r\n                    @keydown=\"selecItemUpDown\">\r\n                    <div\r\n                        :class=\"['ms-16 ms-icon', { 'ms-icon-arrow-down-black': !isShowListData, 'ms-icon-arrow-up-black': isShowListData }]\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <transition name=\"slide-fade\">\r\n                <div class=\"v-select__list\" v-if=\"isShowListData\" tabindex=\"-1\" @keydown=\"selecItemUpDown\"\r\n                    :style=\"[position === 'top' ? { bottom: '100%' } : {}]\" ref=\"combobox__data\">\r\n                    <div v-if=\"filterData.length === 0\" class=\"v-select__items\">\r\n                        Không tìm thấy kết quả\r\n                    </div>\r\n                    <div v-else class=\"v-select__items\" v-for=\"(option, index) of filterData\" :key=\"index\"\r\n                        @click=\"onHandleSelected(option, index)\"\r\n                        :class=\"[{ 'v-select__hover': index == indexItemFocus }, { 'v-select__focus': option[propKey] === keyItemSelected }]\">\r\n                        <slot name=\"item\" :option=\"option\" :index=\"index\">\r\n                            {{ option[propValue] }}\r\n                        </slot>\r\n                        <div v-if=\"!selectBox\" :class=\"{ 'v-select__items--checked': option[propKey] === keyItemSelected }\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { removeVietnameseTones } from '../../../js/common/function.js'\r\nimport Validate from '../../../js/common/validate.js';\r\nimport axios from 'axios';\r\nimport Enum from '../../../js/common/enum.js';\r\nconst keycode = Enum.KEY_CODE;\r\nexport default {\r\n    name: \"MISACombobox\",\r\n    props: {\r\n        data: { // Danh sách dữ liệu\r\n            type: Array,\r\n            required: false\r\n        },\r\n        placeholder: { // Placeholder của input\r\n            type: String,\r\n            required: false,\r\n            default: \"\",\r\n        },\r\n        position: { // Vị trí hiển thị danh sách dữ liệu\r\n            type: String,\r\n            required: false,\r\n            default: \"top\",\r\n        },\r\n        label: { // Label của combobox\r\n            type: String,\r\n            required: false,\r\n            default: null,\r\n        },\r\n        required: { // Bắt buộc nhập\r\n            type: Boolean,\r\n            required: false,\r\n            default: false,\r\n        },\r\n        selectBox: { // Nếu là select box thì không cho gõ text\r\n            type: Boolean,\r\n            required: false,\r\n            default: false,\r\n        },\r\n        modelValue: { // Giá trị của combobox\r\n            required: false,\r\n            default: null,\r\n        },\r\n        propKey: { // Key của dữ liệu\r\n            required: false,\r\n            default: \"key\",\r\n        },\r\n        propValue: { // Value của dữ liệu\r\n            required: false,\r\n            default: \"value\",\r\n        },\r\n        styleProps: { // Style của combobox\r\n            type: Array,\r\n            required: false,\r\n            default: () => [],\r\n        },\r\n        propApi: { // Nếu có api thì lấy dữ liệu từ api\r\n            type: String,\r\n            required: false,\r\n            default: null,\r\n        },\r\n        errorLabel: { // Hiển thị lỗi\r\n            required: false,\r\n        },\r\n        isSubmit: { // Kiểm tra khi submit form\r\n            required: false,\r\n            default: false,\r\n        },\r\n        iconClass: {\r\n            type: String\r\n        },\r\n    },\r\n    computed: {\r\n        /**\r\n         * @description: Tạo style cho combobox\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        style() {\r\n            let styleProps = {};\r\n            if (this.styleProps.length > 0) {\r\n                this.styleProps.forEach((item) => {\r\n                    const key = item.split(\":\")[0];\r\n                    const value = item.split(\":\")[1];\r\n                    styleProps[key] = value;\r\n                });\r\n                return styleProps;\r\n            } else {\r\n                return {};\r\n            }\r\n        },\r\n    },\r\n    data() {\r\n        return {\r\n            isShowListData: false, // Hiển thị danh sách dữ liệu\r\n            indexItemFocus: 0, // index của item được focus\r\n            indexItemSelected: -1, // index của item được chọn\r\n            keyItemSelected: this.modelValue,\r\n            textInput: this.textInput,\r\n            dataApi: [], // dữ liệu lấy từ api\r\n            filterData: [], // dữ liệu lọc\r\n            error: false, // Hiển thị lỗi\r\n            errorMess: \"\", // Nội dung lỗi\r\n        };\r\n    },\r\n    watch: {\r\n        /**\r\n         * @description: Khi thay đổi text thì sẽ tìm kiếm dữ liệu theo text\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        textInput: {\r\n            handler: function (value) {\r\n                const self = this;\r\n                self.filterData = self.dataApi.filter((option) =>\r\n                    removeVietnameseTones(option[self.propValue])\r\n                        .toLowerCase()\r\n                        .includes(removeVietnameseTones(value).toLowerCase())\r\n                );\r\n                this.indexItemFocus = -1;\r\n            },\r\n            deep: true,\r\n        },\r\n        /**\r\n         * @description: Khi bên component cha gọi tới submit thì validate lại dữ liệu trước khi submit\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        isSubmit: { // nếu isSubmit là true thì validate\r\n            handler(isSubmitted) {\r\n                if (isSubmitted) {\r\n                    if (this.validate() && self.error) {\r\n                        this.$emit(\"update:isSubmit\", false);\r\n                    }\r\n                }\r\n            },\r\n            deep: true,\r\n        },\r\n        /**\r\n         * @description: Nếu data bên component cha thay đổi thì sẽ lấy dữ liệu mới\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        data: {\r\n            handler(newData) {\r\n                this.dataApi = newData;\r\n                this.filterData = newData;\r\n                if (this.indexItemSelected !== -1) {\r\n                    this.textInput = newData[this.indexItemSelected][this.propValue];\r\n                }\r\n            },\r\n            deep: true,\r\n        },\r\n        /**\r\n         * @description: Nếu modelValue bên component cha thay đổi thì sẽ reset lại combobox\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        modelValue(newVal) {\r\n            if (newVal === null) { // Nếu modelValue bằng null thì set textInput = \"\" và keyItemSelected = \"\"\r\n                this.$refs.input.blur();\r\n                this.resetCombobox();\r\n            }\r\n        },\r\n    },\r\n    methods: {\r\n        /**\r\n         * @description: Hàm này dùng để validate combobox xem có trống hay không\r\n         * @param {String} giá trị của combobox\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        // validate() {\r\n        //     const self = this;\r\n        //     if (self.required) {\r\n        //         self.error = !Validate.isNullOrEmpty(self.keyItemSelected);\r\n        //         if (self.error) {\r\n        //             self.errorMess = self.$t(\"validate_error.required\", [self.errorLabel]);\r\n        //             return false;\r\n        //         } else {\r\n        //             self.errorMess = \"\";\r\n        //             self.error = false;\r\n        //         }\r\n        //     }\r\n        // },\r\n        /**\r\n         * @description: Hàm này dùng để hiển thị danh sách dữ liệu\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        showListData() {\r\n            const self = this;\r\n            try {\r\n                self.isShowListData = true; // Chuyển trạng thái hiển thị danh sách dữ liệu\r\n                self.filterData = self.dataApi; // Gán dữ liệu đã lọc bằng dữ liệu từ api\r\n                if (self.indexItemSelected > -1) {\r\n                    self.$nextTick(() => { // Đợi DOM render xong thì mới scroll đến vị trí đã chọn\r\n                        self.indexItemFocus = self.indexItemSelected;\r\n                        const position = self.$refs['combobox__data'].children[self.indexItemSelected].offsetTop - self.$refs['combobox__data'].offsetTop;\r\n                        self.$refs['combobox__data'].scrollTop = position;\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        },\r\n        /**\r\n         * @description: Hàm này dùng để lấy dữ liệu khi click vào item hoặc nhấn enter\r\n         * @param {Object} item - Dữ liệu của item được chọn\r\n         * @param {Number} index - Index của item được chọn\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        onHandleSelected(item, index) {\r\n            const self = this;\r\n            try {\r\n                const value = item[self.propValue]; // Lấy giá trị của item được chọn\r\n                self.textInput = value; // Gán giá trị cho textInput\r\n                self.indexItemSelected = index; // Gán index của item được chọn\r\n                self.indexItemFocus = index; // Gán index của item được focus\r\n                self.keyItemSelected = item[self.propKey]; // Gán key của item được chọn\r\n                self.$emit(\"update:modelValue\", self.keyItemSelected); // Emit giá trị của item được chọn\r\n                self.$emit(\"update:textInput\", value); // Emit giá trị của text input\r\n                self.isShowListData = false; // Hide list data\r\n                // self.validate();\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        },\r\n        /**\r\n         * @description: Hàm này dùng để ẩn đi danh sách dữ liệu\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        // hideListData() {\r\n        //     const self = this;\r\n        //     if (!Validate.isNullOrEmpty(self.textInput)) { // Nếu textInput không rỗng thì emit giá trị của textInput là không có trong data\r\n        //         self.$emit(\"update:modelValue\", null);\r\n        //         self.resetCombobox();\r\n        //     }\r\n        //     if (Validate.isNullOrEmpty(self.keyItemSelected)) { // Nếu keyItemSelected không rỗng thì emit giá trị của keyItemSelected là không có trong data\r\n        //         self.onHandleSelected(self.dataApi[self.indexItemSelected], self.indexItemSelected);\r\n        //     }\r\n        //     // this.validate();\r\n        //     self.isShowListData = false; // Hide list data\r\n        // },\r\n        /**\r\n         * @description: Hàm này dùng để chọn item khi nhấn phím mũi tên lên, xuống, enter, esc\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        selecItemUpDown(event) {\r\n            const self = this;\r\n            const keyCodePress = event.keyCode; // Lấy mã phím được nhấn\r\n            if (!self.isShowListData && (keyCodePress == keycode.ARROW_DOWN || keyCodePress == keycode.ARROW_UP)) {\r\n                self.showListData();\r\n                return;\r\n            }\r\n            if (self.isShowListData) {\r\n                try {\r\n                    switch (keyCodePress) {\r\n                        case keycode.ENTER:\r\n                            if (self.filterData.length > 0 && self.indexItemFocus !== -1) {\r\n                                // lấy ra vị trí index của item được chọn trong danh sách dữ liệu\r\n                                const index = self.dataApi.findIndex((item) => item[self.propValue] == self.filterData[self.indexItemFocus][self.propValue]);\r\n                                self.onHandleSelected(self.filterData[self.indexItemFocus], index);\r\n                            } else {\r\n                                self.hideListData();\r\n                            }\r\n                            break;\r\n                        case keycode.ARROW_DOWN:\r\n                            self.indexItemFocus = self.indexItemFocus === self.filterData.length - 1 ? 0 : self.indexItemFocus + 1; // Focus vào item tiếp theo\r\n                            self.handleScroll(self.indexItemFocus);\r\n                            break;\r\n                        case keycode.ARROW_UP:\r\n                            self.indexItemFocus = self.indexItemFocus === 0 ? self.filterData.length - 1 : self.indexItemFocus - 1; // Focus vào item trước đó\r\n                            self.handleScroll(self.indexItemFocus);\r\n                            break;\r\n                        case keycode.ESC:\r\n                            self.hideListData(); // Ẩn danh sách dữ liệu\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * @description: Hàm này dùng để xử lý thanh cuộn lên xuống khi focus vào item\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        handleScroll(indexItemFocus) {\r\n            const self = this;\r\n            try {\r\n                const position = self.$refs['combobox__data'].children[indexItemFocus].offsetTop - self.$refs['combobox__data'].offsetTop;\r\n                self.$refs['combobox__data'].scrollTop = position;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        },\r\n        /**\r\n         * @description: Hàm này dùng để reset lại combobox\r\n         * Author: DDTung 11/07/2023\r\n         */\r\n        resetCombobox() {\r\n            this.indexItemSelected = -1; // Reset lại index item được chọn\r\n            this.indexItemFocus = 0; // Reset lại index item được focus\r\n            this.keyItemSelected = null; // Reset lại key item được chọn\r\n            this.textInput = \"\"; // Reset lại text input\r\n            this.filterData = []; // Reset lại dữ liệu lọc\r\n        },\r\n    },\r\n    /**\r\n     * @description: Hook khởi tạo để gán giá trị vào combo box\r\n     * Author: DDTung 11/07/2023\r\n     */\r\n    async created() {\r\n        const self = this;\r\n        try {\r\n            if (self.propApi) { // Nếu có prop api thì gọi api lấy dữ liệu\r\n                const response = await axios.get(self.propApi);\r\n                self.dataApi = response.data;\r\n                self.filterData = response.data;\r\n            }\r\n            if (self.data) { // Nếu có dữ liệu truyền từ component cha thì gán dữ liệu\r\n                self.dataApi = self.data;\r\n                self.filterData = self.data;\r\n            }\r\n            if (self.modelValue) { // Nếu có giá trị mặc định truyền từ component cha\r\n                const index = self.dataApi.findIndex((item) => item[self.propKey] === self.modelValue); // Tìm index của item có key trùng với giá trị mặc định\r\n                if (index !== -1) { // Nếu tồn tại item có key trùng với giá trị mặc định\r\n                    self.onHandleSelected(self.dataApi[index], index); // Lấy dữ liệu của item được focus\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.slide-fade-enter-from,\r\n.slide-fade-leave-to {\r\n    transform: translateY(10px);\r\n    opacity: 0;\r\n}\r\n\r\n.slide-fade-enter-active,\r\n.slide-fade-leave-active {\r\n    transition: all 0.3s;\r\n}\r\n\r\n.v-combobox__icon {\r\n    background: var(--icon-url) no-repeat -62px -328px;\r\n}\r\n\r\n.v {\r\n    &-combobox {\r\n        position: relative;\r\n        margin-right: 11px;\r\n    }\r\n\r\n    &-combobx_show {\r\n        border: 1px solid #1aa4c8;\r\n    }\r\n\r\n    &-combobox__label {\r\n        label {\r\n            cursor: pointer;\r\n        }\r\n\r\n        margin-bottom: 8px;\r\n\r\n        span {\r\n            color: red;\r\n        }\r\n    }\r\n\r\n    &-combobox__body {\r\n        width: 60px;\r\n        text-align: left;\r\n        position: relative;\r\n        outline: none;\r\n        box-sizing: border-box;\r\n        border-radius: 2.5px;\r\n        background-color: #fff;\r\n    }\r\n\r\n    &-combobox__selected {\r\n        user-select: none;\r\n        padding: 0 20px 0 10px;\r\n        outline: none;\r\n        min-height: 25px;\r\n        color: #000;\r\n        box-sizing: border-box;\r\n        border: 1px solid grey;\r\n        border-radius: 2.5px;\r\n        background-color: #fff;\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        input {\r\n            border: none;\r\n            outline: none;\r\n            padding: 0;\r\n            background-color: transparent;\r\n            overflow: hidden;\r\n        }\r\n    }\r\n\r\n    &-combobox__focus {\r\n        border: 1px solid #1aa4c8;\r\n    }\r\n\r\n    &-combobox__icon {\r\n        top: 0;\r\n        right: 0;\r\n        position: absolute;\r\n        min-width: 25px;\r\n        cursor: pointer;\r\n        bottom: 0;\r\n        border-radius: 0 4px 4px 0;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    &-select__list {\r\n        color: #000;\r\n        position: absolute;\r\n        background-color: #fff;\r\n        padding: 8px;\r\n        bottom: 100%;\r\n        left: 0;\r\n        right: 0;\r\n        z-index: 9999;\r\n        max-height: 200px;\r\n        overflow-y: auto;\r\n        box-shadow: 0 0 10px rgba(23, 27, 42, 0.24);\r\n    }\r\n\r\n    &-select__items {\r\n        padding: 0 4px;\r\n        cursor: pointer;\r\n        user-select: none;\r\n        border-radius: 4px;\r\n        min-height: 25px;\r\n        line-height: 25px;\r\n        position: relative;\r\n        text-align: center;\r\n\r\n        &:hover {\r\n            background-color: #1aa5c88e;\r\n        }\r\n\r\n        &.itemFocus {\r\n            background-color: grey;\r\n        }\r\n    }\r\n\r\n    &-select__focus {\r\n        background-color: #1aa4c8 !important;\r\n        color: #fff !important;\r\n    }\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}